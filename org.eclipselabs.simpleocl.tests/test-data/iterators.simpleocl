-- Provides custom OCL collection iterators.
-- (C) 2015, Dennis Wagelaar <dwagelaar@gmail.com>
module iterators;

-- Returns the elements of the input collection mapped by the values of 'f' applied to itself.
-- Example: collection->mappedBy(e | e.property)
context Collection(OclAny) def : mappedBy(f : Lambda(OclAny) : OclAny) : Map(OclAny, OclAny) =
	self->iterate(e; acc : Map(OclAny, OclAny) = Map{} |
		acc.including(f(e), e)
	);

-- Returns the elements of the input collection mapped as a sequence by the values of 'f' applied to itself.
-- Example: collection->mappedBySequence(e | e.property)
context Collection(OclAny) def : mappedBySequence(f : Lambda(OclAny) : OclAny) : Map(OclAny, Sequence(OclAny)) =
	self->iterate(e; acc : Map(OclAny, Sequence(OclAny)) = Map{} |
		acc.including(f(e), 
			let c : Sequence(OclAny) = acc.get(f(e)) in
			if c.oclIsUndefined() then
				Sequence{e}
			else
				c->including(e)
			endif
		)
	);

-- Joins the elements of the input collection by applying 'f' to the joined output and each element of the input collection.
-- Example: Sequence{'one', 'two', 'three'}->join(x, y | x + ', ' + y) 
context Collection(OclAny) def : join(f : Lambda(OclAny, OclAny) : OclAny) : OclAny =
	self->iterate(e; acc : OclAny = OclUndefined |
		if acc.oclIsUndefined() then
			e
		else 
			f(acc, e)
		endif
	);
